"use strict";(self.webpackChunkfront_end_notes=self.webpackChunkfront_end_notes||[]).push([[631],{8194:(e,l,a)=>{a.r(l),a.d(l,{comp:()=>i,data:()=>h});var t=a(641);const p={},i=(0,a(6262).A)(p,[["render",function(e,l){return(0,t.uX)(),(0,t.CE)("div",null,l[0]||(l[0]=[(0,t.Fv)('<h1 id="八股文" tabindex="-1"><a class="header-anchor" href="#八股文"><span>八股文</span></a></h1><p>前端开发面试必背八股文</p><h2 id="day-1" tabindex="-1"><a class="header-anchor" href="#day-1"><span>day 1</span></a></h2><h3 id="osi-模型和-tcp-ip-模型" tabindex="-1"><a class="header-anchor" href="#osi-模型和-tcp-ip-模型"><span>OSI 模型和 TCP/IP 模型</span></a></h3><blockquote><p>理解 OSI 模型共有 7 层，能够说明是哪 7 层。<br> 能够粗浅描述每一层的基本功能和职责<br> 对于某些层，熟悉一些常见的协议，比如网络层的 IP，传输层的 TCP 和 UDP。</p></blockquote><p>osi模型是iso组织提出的一个计算机网络之间相互通信的模型，从下往上包括7个层次：<br> 应用层、表示层、会话层、传输层、网络层、数据链路层、物理层</p><p>osi模型更加系统，tcp/ip协议更加偏向实际，我们通常最常用的是tcp/ip协议。<br> 而tcp/ip协议只有四层，分别是：</p><p>应用层：对应osi模型当中的应用层、表示层、会话层，指的是应用程序和用户的交互接口，比如http（网页浏览）、ftp（文件传输） ，这一层我们是不用去关心数据是如何传输的，就像寄快递的时候不需要关心快递是如何运输的 传输层：对应osi的传输层，负责端到端的传输，传输协议有tcp，提供安全可靠的传输，确保数据传输的正确和完整性；udp协议，提供无连接的传输，及时性的传输</p><p>网络层：对应osi的网络层，协议是ip协议，负责数据包的路由和转发</p><h3 id="从输入url到页面展示发生了什么" tabindex="-1"><a class="header-anchor" href="#从输入url到页面展示发生了什么"><span>从输入URL到页面展示发生了什么</span></a></h3><h2 id="day-2" tabindex="-1"><a class="header-anchor" href="#day-2"><span>day 2</span></a></h2><h3 id="http请求报文和响应报文是怎样的" tabindex="-1"><a class="header-anchor" href="#http请求报文和响应报文是怎样的"><span>HTTP请求报文和响应报文是怎样的</span></a></h3><h3 id="http请求方式有哪些" tabindex="-1"><a class="header-anchor" href="#http请求方式有哪些"><span>HTTP请求方式有哪些</span></a></h3><h3 id="get请求和post请求的区别" tabindex="-1"><a class="header-anchor" href="#get请求和post请求的区别"><span>GET请求和POST请求的区别</span></a></h3><h2 id="day-3" tabindex="-1"><a class="header-anchor" href="#day-3"><span>day 3</span></a></h2><h3 id="http请求中常见的状态码" tabindex="-1"><a class="header-anchor" href="#http请求中常见的状态码"><span>HTTP请求中常见的状态码</span></a></h3><blockquote><p>掌握程度：<br> ● 状态码：能够根据1xx、2xx、3xx、4xx、5xx分类描述状态码，并对每个类别中的常见状态码能够解释其含义和使用场景。<br> ● 缓存：知道3xx状态码中的重定向是如何工作的。<br> ● 进阶：能够结合实际案例来讨论状态码的使用。</p></blockquote><h3 id="什么是强缓存和协商缓存" tabindex="-1"><a class="header-anchor" href="#什么是强缓存和协商缓存"><span>什么是强缓存和协商缓存</span></a></h3><blockquote><p>● 基本概念：区分强缓存和协商缓存的概念，并解释它们的不同用途。<br> ● 工作流程: 能够描述浏览器和服务器在强缓存和协商缓存中如何交互。<br> ● HTTP头部字段: 知道实现强缓存和协商缓存的HTTP头部字段，如 Cache-Control, Last-Modified, ETag, If-Modified-Since, If-None-Match。<br> ● 性能优化: 理解缓存机制如何提高Web应用的性能和用户体验。</p></blockquote><h2 id="day-5" tabindex="-1"><a class="header-anchor" href="#day-5"><span>day 5</span></a></h2><h3 id="https和http有哪些区别" tabindex="-1"><a class="header-anchor" href="#https和http有哪些区别"><span>HTTPS和HTTP有哪些区别</span></a></h3><p>https在http基础上加上了ssl/tls加密，保证安全，而http是明文传输的<br> https需要向服务器申请CA证书<br> http的默认端口是80，https是443</p><h3 id="https的工作原理-https建立连接的过程" tabindex="-1"><a class="header-anchor" href="#https的工作原理-https建立连接的过程"><span>HTTPS的工作原理(HTTPS建立连接的过程)</span></a></h3><p>https的握手本质就是tls的握手，是一回事</p><ol><li>首先客户端发送请求给服务端，请求包括版本号、一个随机数和客户端的加密方法</li><li>收到请求后，紧接着服务器确认双方使用的加密方法、给出数字证书和一个随机数</li><li>客户端会确认数字证书是否有效，并生成一个新的随机数，用数字证书里的公钥加密后发给服务端，并且还会提供前面所有内容的哈希值，给服务器校验</li><li>服务器使用自己的私钥解密发过来的随机数</li><li>客户端和服务端根据约定的加密方法，使用前面使用的三个随机数，生成对话密钥，通过这个密钥来加密通话</li></ol><h3 id="tcp和udp的区别" tabindex="-1"><a class="header-anchor" href="#tcp和udp的区别"><span>TCP和UDP的区别</span></a></h3><ol><li>tcp是面向连接的协议，而udp是无连接的</li><li>tcp能够确保数据的传输完整性，而udp可能出现丢包</li><li>tcp有拥塞控制机制，根据网络状况调整传输速度，而udp没有拥塞控制，通常发送速度恒定</li><li>tcp有数据连接，拥塞控制等等，性能开销大，而udp的性能开销小</li><li>tcp的报文头部包括序列号、确认号等信息，而udp报文的头部相对简单</li></ol><h2 id="day-6" tabindex="-1"><a class="header-anchor" href="#day-6"><span>day 6</span></a></h2><h3 id="tcp连接如何确保可靠性" tabindex="-1"><a class="header-anchor" href="#tcp连接如何确保可靠性"><span>TCP连接如何确保可靠性</span></a></h3><blockquote><p>掌握程度： ● 能够清晰地描述TCP协议的工作原理和关键特性。 ● 理解TCP如何通过各种机制确保数据传输的可靠性。 ○ 连接管理：三次握手，四次挥手 ○ 差错控制：序列号和确认应答机制 ○ 超时重传机制 ○ 流量控制 ○ 拥塞控制 ● 知道TCP的流量控制和拥塞控制对于网络性能的影响。</p></blockquote><p>tcp通过差错控制（序列号、确认应答、数据校验）、超时重传、流量控制、拥塞控制，保证数据的可靠性和效率</p><ol><li>序列号：每个tcp段都有一个序列号，确保数据包的顺序是正确的</li><li>数据校验；tcp使用校验和来检测数据有没有错，如果有，接收端就会丢弃数据包，等待重传</li><li>确认应答：接收方发送ack确认应答收到的数据，如果发送方在一定时间里没有收到确认，就会重新发送数据</li><li>超时重传：发送方在发送数据的时候，后开启一个定时器，在这个定时器的时间里没有收到ack报文，就会进行重传，达到一定次数还没有成功，就会放弃，并且发送一个复位信号</li><li>流量控制：通过滑动窗口进行流量控制，确保接收方能够处理发送方的数据量</li><li>拥塞控制：tcp通过算法如慢启动、拥塞避免、快重传、快速修复控制发送速率，防止网络拥塞</li></ol><h3 id="tcp-拥塞控制机制" tabindex="-1"><a class="header-anchor" href="#tcp-拥塞控制机制"><span>TCP 拥塞控制机制</span></a></h3><blockquote><p>掌握程度：<br> ● 能够解释为什么需要拥塞控制，即动态调整数据的发送速率，防止网络过载，保证网络的稳定和高效。<br> ● 掌握拥塞控制的主要算法<br> ○ 慢启动：开始时，发送窗口大小逐渐增加，直到达到一个阈值。<br> ○ 拥塞避免：超过阈值后，窗口大小增长速度减慢，采用线性增长。<br> ○ 快重传：当接收方检测到失序的包时，立即发送重复确认，触发发送方进行重传。<br> ○ 快恢复：在快重传后，不立即回到慢启动状态，而是尝试继续以当前窗口大小发送。</p></blockquote><p>拥塞控制机制主要是四种：</p><ol><li>慢启动：一开始拥塞窗口的值不会太大，会逐渐增加发送窗口的大小，实现指数级增长，主要是测试网络的拥塞程度</li><li>拥塞避免：慢启动达到慢启动的阈值，来到拥塞避免阶段，拥塞窗口会线性增长，控制发送速率避免引起网络拥塞</li><li>快速重传；接收方在收到一个失序的报文后，就会立即发出重复确认，发送方连续三次收到重复确认，就会重传对方没有收到的片段</li><li>快速恢复：快速重传后就会进入快速恢复的阶段，这个阶段会将慢启动的阈值设置为当前窗口的一半，拥塞窗口大小设置为慢启动阈值加上未被快速重传的数据快的量</li></ol><h3 id="tcp-流量控制机制" tabindex="-1"><a class="header-anchor" href="#tcp-流量控制机制"><span>TCP 流量控制机制</span></a></h3><blockquote><p>掌握程度<br> ● 能够解释流量控制的目的。能够清晰地描述TCP流量控制的基本工作原理和关键组件。<br> ● 知道 TCP 是使用滑动窗口机制来实现流量控制，理解TCP滑动窗口协议的工作原理，包括窗口大小的通告和更新<br> ● 知道流量控制与拥塞控制的区别和它们在TCP中的作用。<br> ● 了解TCP报文结构，特别是与流量控制相关的字段。</p></blockquote><p>流量控制就是为了让发送数据的速度不要太快，让接收方来得及接受。tcp使用大小可变的滑动窗口来进行流量控制</p><ol><li>当一个连接建立的时候，每一端都有一个缓冲区来保存输入的数据，并且把缓存区的大小发送给另一端</li><li>每次数据到达接收方，接收方都会发送确认，包含了剩余的缓存窗口的大小（指出窗口大小的通知叫做窗口通告）</li><li>如果接收方应用程序读数据的速度可以和数据到达的速度一样快，就会在确认里发送一个正的窗口通告</li><li>如果发送方的操作速度快于接收方，接收的数据就会充满接收方的缓存区，导致接收方通告一个零窗口，发送方收到零窗口通告的时候就是停止发送数据，直到接收方通告一个正的窗口</li></ol><h3 id="udp怎么实现可靠传输" tabindex="-1"><a class="header-anchor" href="#udp怎么实现可靠传输"><span>UDP怎么实现可靠传输</span></a></h3><p>udp不属于连接型协议，无法实现数据的可靠传输，只能通过应用层进行实现，应用层从两个方面来考虑：</p><ol><li>提供超时重传</li><li>提供确认序列号 发送端：在udp定义一个首部，包含时间戳、序列号。时间戳是用于计算往返时间（rtt），从而计算出合适的重传超时时间（rto），通过等-停协议发送数据，即发送后等待确认应答，收到确认后再发送数据。如果在rto时间里没有收到确认报文，就将rto扩大两倍，重新计时 接收端：接收到报文后，提取首部的时间戳和序列号。在发送确认应答，在应答里添加首部，里面包括获取的时间戳和序列号。根据确认序列号对已收到的数据进行排序，丢掉重复的数据报。</li></ol><h2 id="day-8" tabindex="-1"><a class="header-anchor" href="#day-8"><span>day 8</span></a></h2><h3 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h3><h3 id="四次挥手的过程" tabindex="-1"><a class="header-anchor" href="#四次挥手的过程"><span>四次挥手的过程</span></a></h3><h3 id="http的keep-alive是什么-tcp-的-keepalive-和-http-的-keep-alive-是一个东西吗" tabindex="-1"><a class="header-anchor" href="#http的keep-alive是什么-tcp-的-keepalive-和-http-的-keep-alive-是一个东西吗"><span>HTTP的Keep-Alive是什么？TCP 的 Keepalive 和 HTTP 的 Keep-Alive 是一个东西吗？</span></a></h3>',47)]))}]]),h=JSON.parse('{"path":"/posts/%E5%85%AB%E8%82%A1%E6%96%87.html","title":"八股文","lang":"zh-CN","frontmatter":{"date":"2024-11-11T00:00:00.000Z","category":["CategoryC"],"tag":["tag E"],"sticky":10},"headers":[{"level":2,"title":"day 1","slug":"day-1","link":"#day-1","children":[{"level":3,"title":"OSI 模型和 TCP/IP 模型","slug":"osi-模型和-tcp-ip-模型","link":"#osi-模型和-tcp-ip-模型","children":[]},{"level":3,"title":"从输入URL到页面展示发生了什么","slug":"从输入url到页面展示发生了什么","link":"#从输入url到页面展示发生了什么","children":[]}]},{"level":2,"title":"day 2","slug":"day-2","link":"#day-2","children":[{"level":3,"title":"HTTP请求报文和响应报文是怎样的","slug":"http请求报文和响应报文是怎样的","link":"#http请求报文和响应报文是怎样的","children":[]},{"level":3,"title":"HTTP请求方式有哪些","slug":"http请求方式有哪些","link":"#http请求方式有哪些","children":[]},{"level":3,"title":"GET请求和POST请求的区别","slug":"get请求和post请求的区别","link":"#get请求和post请求的区别","children":[]}]},{"level":2,"title":"day 3","slug":"day-3","link":"#day-3","children":[{"level":3,"title":"HTTP请求中常见的状态码","slug":"http请求中常见的状态码","link":"#http请求中常见的状态码","children":[]},{"level":3,"title":"什么是强缓存和协商缓存","slug":"什么是强缓存和协商缓存","link":"#什么是强缓存和协商缓存","children":[]}]},{"level":2,"title":"day 5","slug":"day-5","link":"#day-5","children":[{"level":3,"title":"HTTPS和HTTP有哪些区别","slug":"https和http有哪些区别","link":"#https和http有哪些区别","children":[]},{"level":3,"title":"HTTPS的工作原理(HTTPS建立连接的过程)","slug":"https的工作原理-https建立连接的过程","link":"#https的工作原理-https建立连接的过程","children":[]},{"level":3,"title":"TCP和UDP的区别","slug":"tcp和udp的区别","link":"#tcp和udp的区别","children":[]}]},{"level":2,"title":"day 6","slug":"day-6","link":"#day-6","children":[{"level":3,"title":"TCP连接如何确保可靠性","slug":"tcp连接如何确保可靠性","link":"#tcp连接如何确保可靠性","children":[]},{"level":3,"title":"TCP 拥塞控制机制","slug":"tcp-拥塞控制机制","link":"#tcp-拥塞控制机制","children":[]},{"level":3,"title":"TCP 流量控制机制","slug":"tcp-流量控制机制","link":"#tcp-流量控制机制","children":[]},{"level":3,"title":"UDP怎么实现可靠传输","slug":"udp怎么实现可靠传输","link":"#udp怎么实现可靠传输","children":[]}]},{"level":2,"title":"day 8","slug":"day-8","link":"#day-8","children":[{"level":3,"title":"三次握手","slug":"三次握手","link":"#三次握手","children":[]},{"level":3,"title":"四次挥手的过程","slug":"四次挥手的过程","link":"#四次挥手的过程","children":[]},{"level":3,"title":"HTTP的Keep-Alive是什么？TCP 的 Keepalive 和 HTTP 的 Keep-Alive 是一个东西吗？","slug":"http的keep-alive是什么-tcp-的-keepalive-和-http-的-keep-alive-是一个东西吗","link":"#http的keep-alive是什么-tcp-的-keepalive-和-http-的-keep-alive-是一个东西吗","children":[]}]}],"git":{"updatedTime":1731408714000,"contributors":[{"name":"namewyf","email":"wyf19892552132@163.com","commits":5}]},"filePathRelative":"posts/八股文.md","excerpt":"\\n<p>前端开发面试必背八股文</p>\\n"}')}}]);