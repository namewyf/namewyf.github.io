"use strict";(self.webpackChunkfront_end_notes=self.webpackChunkfront_end_notes||[]).push([[46],{6154:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>t,data:()=>l});var p=a(641);const e={},t=(0,a(6262).A)(e,[["render",function(s,n){return(0,p.uX)(),(0,p.CE)("div",null,n[0]||(n[0]=[(0,p.Fv)('<h1 id="后台管理项目" tabindex="-1"><a class="header-anchor" href="#后台管理项目"><span>后台管理项目</span></a></h1><p>基于elementui、vue3、koa的后台管理项目</p><h2 id="第二章-前端架构设计" tabindex="-1"><a class="header-anchor" href="#第二章-前端架构设计"><span>第二章 前端架构设计</span></a></h2><h3 id="_2-8-axios二次封装-下" tabindex="-1"><a class="header-anchor" href="#_2-8-axios二次封装-下"><span>2-8 axios二次封装（下）</span></a></h3><p>构造好request的封装函数后在main.js里进行全局挂载之后才能在组件进行全局使用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">&#39;./uitils/request&#39;</span><span class="token punctuation">;</span></span>\n<span class="line">app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>$request <span class="token operator">=</span> request</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>封装完成后，就能在组件里面调用了</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$request</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">      <span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">      <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">      <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span></span>\n<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;jack&#39;</span></span>\n<span class="line">      <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>\n<span class="line">       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;res=&quot;</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了更加方便的进行调用，我们还可以把request函数转换成一个对象，这个对象里有各种请求的方法</p><p>request.js</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;patch&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    request<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token comment">//options可以对请求的参数做一些额外的拓展，比如可以传mock:true,或者loading之类的东西</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">            url<span class="token punctuation">,</span></span>\n<span class="line">            data<span class="token punctuation">,</span></span>\n<span class="line">            <span class="token literal-property property">method</span><span class="token operator">:</span> item<span class="token punctuation">,</span></span>\n<span class="line">            <span class="token operator">...</span>options</span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>login.vue</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>$request<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;jack&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>\n<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-9-storage二次封装" tabindex="-1"><a class="header-anchor" href="#_2-9-storage二次封装"><span>2-9 storage二次封装</span></a></h3><h4 id="storage的使用场景" tabindex="-1"><a class="header-anchor" href="#storage的使用场景"><span>storage的使用场景：</span></a></h4><ol><li>在用户进行登陆的时候，用来存储服务器发来的jwt(token)</li><li>跨组件的数据共享，如果使用vuex只是一个数据共享，只是一个数据的管理，数据都只是存储在js内存里，当页面刷新的时候数据都会销毁，所以我们一般使用vuex结合local storage去做存储和管理</li><li>storage比cookie存储的数据的量更多的</li></ol><h4 id="local-storage封装的目的" tabindex="-1"><a class="header-anchor" href="#local-storage封装的目的"><span>local storage封装的目的：</span></a></h4><p>定义不同的命名空间对变量名进行隔离，防止不同命名的冲突,但是local storage只能存储字符串，所以需要把对象转化为字符串再存储，这时候就可以使用JSON.stringify()方法来序列化对象，然后通过JSON.parse()方法来还原对象</p><blockquote><p>序列化（Serialization）是将数据结构或对象的状态转换为一个可存储或传输的格式的过程</p></blockquote><blockquote><p>注意json语法的对象里面的key必须要加双引号(对，是必须是双引号)</p></blockquote><p>utils/storage.js</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Storage的封装</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">&quot;../config&quot;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token function">setItem</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        storage<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val</span>\n<span class="line">        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>namespace<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token function">getItem</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>namespace<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;{}&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token function">clearItem</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">let</span> storage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">        <span class="token keyword">delete</span> storage<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token comment">//delete 是一个操作符，用于删除对象的属性</span></span>\n<span class="line">        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>namespace<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">    <span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>config/index.js</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token literal-property property">namespace</span><span class="token operator">:</span> <span class="token string">&#39;manager&#39;</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>App.vue</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>$storage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;Tom&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注：在开发者工具中查看 localStorage 中存储的值时,确实会以对象的形式显示,即使你使用 JSON.stringify() 将其转换为字符串存储。<br> 这是因为开发者工具会尝试解析和显示存储的值的实际数据结构,而不仅仅是字符串形式。虽然 localStorage 中存储的是字符串,但开发者工具会尝试将其转换回原始的数据结构以便于查看和调试。<br> 所以即使你将对象转换为 JSON 字符串存储,开发者工具还是会尽量还原成对象的形式显示。这是开发者工具的一个特性,旨在为开发者提供更直观的数据查看体验。<br> 但实际上,在 localStorage 中存储的确是字符串形式的 JSON 数据。当你从 localStorage 中读取数据时,需要使用 JSON.parse() 将字符串转换回原始的对象或数组。<br> 总之,开发者工具的显示行为和 localStorage 的实际存储方式是不同的。这是开发者工具的一个特性,旨在为开发者提供更友好的数据查看体验。</p></blockquote><h3 id="_2-10-主页结构布局" tabindex="-1"><a class="header-anchor" href="#_2-10-主页结构布局"><span>2-10 主页结构布局</span></a></h3><h4 id="引入全局的样式文件" tabindex="-1"><a class="header-anchor" href="#引入全局的样式文件"><span>引入全局的样式文件</span></a></h4><p>放在assets目录下，目录如下 -assets --style ---index.scss ---reset.css --logo.png</p><p>index.scss里是有一些公��的样式，是针对本项目设置的一些公共样式和业务样式</p><blockquote><p>reset.css 文件, 类似于base.css, 是一个用于重置浏览器默认样式的样式表。其主要目的是消除不同浏览器之间对HTML元素默认样式的差异，以确保网页在各种浏览器中呈现一致的外观</p></blockquote><p>App.vue里面引入：</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line">&lt;style lang=<span class="token string">&quot;scss&quot;</span>&gt;</span>\n<span class="line"><span class="token comment">/* style样式要通过@import的方式进行引入 */</span></span>\n<span class="line"><span class="token comment">/* 不过import已经被弃用了ys 的vite-plugin-sass-glob-resolver插件所取代，</span>\n<span class="line">所以这里不再使用import，而是使用@use，</span>\n<span class="line">@use与@import的区别是，@import会引入所有样式，而@use只会引入用到的样式，</span>\n<span class="line">所以@use性能更好，但需要使用css变量， */</span></span>\n<span class="line"><span class="token atrule"><span class="token rule">@use</span> <span class="token string">&quot;./assets/style/index.scss&quot;</span><span class="token punctuation">;</span></span></span>\n<span class="line"><span class="token atrule"><span class="token rule">@use</span> <span class="token string">&quot;./assets/style/reset.css&quot;</span><span class="token punctuation">;</span></span></span>\n<span class="line">&lt;/style&gt;</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里要加lang=&quot;scss&quot;</p><p>vite.config.js</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">  <span class="token comment">//配置 Vite 项目中 SCSS 预处理器的 API 类型，指定使用现代编译器。这有助于确保 SCSS 文件在编译时使用最新的编译方式，提高兼容性和性能。</span></span>\n<span class="line">  <span class="token literal-property property">css</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token literal-property property">preprocessorOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token literal-property property">scss</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token literal-property property">api</span><span class="token operator">:</span> <span class="token string">&quot;modern-compiler&quot;</span> <span class="token comment">// or &#39;modern&#39;</span></span>\n<span class="line">      <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Home.vue</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span></span>\n<span class="line">  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic-layout&quot;</span><span class="token operator">&gt;</span></span>\n<span class="line">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 导航栏 <span class="token operator">--</span><span class="token operator">&gt;</span></span>\n<span class="line">    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;nav-side&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>\n<span class="line">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 右侧内容 <span class="token operator">--</span><span class="token operator">&gt;</span></span>\n<span class="line">    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;content-right&quot;</span><span class="token operator">&gt;</span></span>\n<span class="line">      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 顶部导航栏 <span class="token operator">--</span><span class="token operator">&gt;</span></span>\n<span class="line">      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;nav-top&quot;</span><span class="token operator">&gt;</span></span>\n<span class="line">        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;bread&quot;</span><span class="token operator">&gt;</span></span>\n<span class="line">          面包屑</span>\n<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>\n<span class="line">        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;user-info&quot;</span><span class="token operator">&gt;</span></span>\n<span class="line">          用户名</span>\n<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>\n<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>\n<span class="line">      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;wrapper&quot;</span><span class="token operator">&gt;</span></span>\n<span class="line">        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;main-page&quot;</span><span class="token operator">&gt;</span></span>\n<span class="line">          <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">&gt;</span></span>\n<span class="line">        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>\n<span class="line">      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>\n<span class="line">    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>\n<span class="line">  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>\n<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;home&#39;</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">&quot;scss&quot;</span><span class="token operator">&gt;</span></span>\n<span class="line"><span class="token punctuation">.</span>basic<span class="token operator">-</span>layout <span class="token punctuation">{</span></span>\n<span class="line">  <span class="token literal-property property">position</span><span class="token operator">:</span> relative<span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token punctuation">.</span>nav<span class="token operator">-</span>side <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token literal-property property">position</span><span class="token operator">:</span> fixed<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token literal-property property">width</span><span class="token operator">:</span> 200px<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token literal-property property">height</span><span class="token operator">:</span> 100vh<span class="token punctuation">;</span></span>\n<span class="line">    background<span class="token operator">-</span>color<span class="token operator">:</span> #<span class="token number">001529</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token literal-property property">color</span><span class="token operator">:</span> #fff<span class="token punctuation">;</span> <span class="token comment">//文字颜色为白色</span></span>\n<span class="line">    overflow<span class="token operator">-</span>y<span class="token operator">:</span> auto<span class="token punctuation">;</span> <span class="token comment">//滚动条</span></span>\n<span class="line">    <span class="token literal-property property">transition</span><span class="token operator">:</span> width <span class="token number">0</span><span class="token punctuation">.</span>5s <span class="token comment">//宽度变化的动画</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">  <span class="token punctuation">.</span>content<span class="token operator">-</span>right <span class="token punctuation">{</span></span>\n<span class="line">    margin<span class="token operator">-</span>left<span class="token operator">:</span> 200px<span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token punctuation">.</span>nav<span class="token operator">-</span>top <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token literal-property property">height</span><span class="token operator">:</span> 50px<span class="token punctuation">;</span></span>\n<span class="line">      line<span class="token operator">-</span>height<span class="token operator">:</span> 50px<span class="token punctuation">;</span></span>\n<span class="line">      <span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span></span>\n<span class="line">      justify<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>between<span class="token punctuation">;</span> <span class="token comment">//控制两端对齐</span></span>\n<span class="line">      border<span class="token operator">-</span>bottom<span class="token operator">:</span> 1px solid #ddd<span class="token punctuation">;</span></span>\n<span class="line">      <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span> 20px<span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"></span>\n<span class="line">    <span class="token punctuation">.</span>wrapper <span class="token punctuation">{</span></span>\n<span class="line">      <span class="token literal-property property">background</span><span class="token operator">:</span> #eef0f3<span class="token punctuation">;</span></span>\n<span class="line">      <span class="token literal-property property">padding</span><span class="token operator">:</span> 20px<span class="token punctuation">;</span></span>\n<span class="line">      <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vh <span class="token operator">-</span> 50px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//计算属性</span></span>\n<span class="line"></span>\n<span class="line">      <span class="token punctuation">.</span>main<span class="token operator">-</span>page <span class="token punctuation">{</span></span>\n<span class="line">        <span class="token literal-property property">background</span><span class="token operator">:</span> #fff<span class="token punctuation">;</span></span>\n<span class="line">        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span></span>\n<span class="line">      <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">  <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第四章-用户登录前后端实现" tabindex="-1"><a class="header-anchor" href="#第四章-用户登录前后端实现"><span>第四章 用户登录前后端实现</span></a></h2><h3 id="_4-1登录布局开发" tabindex="-1"><a class="header-anchor" href="#_4-1登录布局开发"><span>4-1登录布局开发</span></a></h3><p>登录页面没有复用主页面的布局，所以需要单独的布局，只需要实现</p><h3 id="_4-2登录交互开发" tabindex="-1"><a class="header-anchor" href="#_4-2登录交互开发"><span>4-2登录交互开发</span></a></h3><h3 id="_4-3用户登录后台实现" tabindex="-1"><a class="header-anchor" href="#_4-3用户登录后台实现"><span>4-3用户登录后台实现</span></a></h3>',44)]))}]]),l=JSON.parse('{"path":"/posts/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE.html","title":"后台管理项目","lang":"zh-CN","frontmatter":{"date":"2024-11-11T00:00:00.000Z","category":["CategoryC"],"tag":["tag E"],"sticky":20},"headers":[{"level":2,"title":"第二章 前端架构设计","slug":"第二章-前端架构设计","link":"#第二章-前端架构设计","children":[{"level":3,"title":"2-8 axios二次封装（下）","slug":"_2-8-axios二次封装-下","link":"#_2-8-axios二次封装-下","children":[]},{"level":3,"title":"2-9 storage二次封装","slug":"_2-9-storage二次封装","link":"#_2-9-storage二次封装","children":[]},{"level":3,"title":"2-10 主页结构布局","slug":"_2-10-主页结构布局","link":"#_2-10-主页结构布局","children":[]}]},{"level":2,"title":"第四章 用户登录前后端实现","slug":"第四章-用户登录前后端实现","link":"#第四章-用户登录前后端实现","children":[{"level":3,"title":"4-1登录布局开发","slug":"_4-1登录布局开发","link":"#_4-1登录布局开发","children":[]},{"level":3,"title":"4-2登录交互开发","slug":"_4-2登录交互开发","link":"#_4-2登录交互开发","children":[]},{"level":3,"title":"4-3用户登录后台实现","slug":"_4-3用户登录后台实现","link":"#_4-3用户登录后台实现","children":[]}]}],"git":{"updatedTime":1731911714000,"contributors":[{"name":"namewyf","email":"wyf19892552132@163.com","commits":5}]},"filePathRelative":"posts/后台管理项目.md","excerpt":"\\n<p>基于elementui、vue3、koa的后台管理项目</p>\\n"}')}}]);