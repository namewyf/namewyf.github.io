"use strict";(self.webpackChunkfront_end_notes=self.webpackChunkfront_end_notes||[]).push([[837],{4815:(s,n,a)=>{a.r(n),a.d(n,{comp:()=>t,data:()=>o});var e=a(641);const p={},t=(0,a(6262).A)(p,[["render",function(s,n){return(0,e.uX)(),(0,e.CE)("div",null,n[0]||(n[0]=[(0,e.Fv)('<h1 id="如何混合使用commonjs和esm" tabindex="-1"><a class="header-anchor" href="#如何混合使用commonjs和esm"><span>如何混合使用commonjs和esm</span></a></h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景"><span>背景</span></a></h2><p>在npm的各种模块里，有的模块最新引入，使用的是esm，有些是commonjs。</p><p>如果说回退包的版本，都使用commonjs，那么又会错失很多更新的内容。</p><h2 id="解决" tabindex="-1"><a class="header-anchor" href="#解决"><span>解决</span></a></h2><h3 id="_1-修改后缀混合使用commonjs和esm。" tabindex="-1"><a class="header-anchor" href="#_1-修改后缀混合使用commonjs和esm。"><span>1. 修改后缀混合使用commonjs和esm。</span></a></h3><p>当我们把文件命名为<code>.mjs</code>时，Node.js会默认使用esm模块化规范。</p><p>如果使用<code>.cjs</code>，Node.js会默认使用commonjs模块化规范。</p><p>如果是<code>.js</code>，则会看package.json的type字段，如果为module，则使用esm，否则使用commonjs。</p><p>利用这一点，就能混合使用commonjs和esm。</p><p>这种方式的缺点是不同的只能把esm和commonjs的模块分开文件夹使用，不能把commonjs和esm的模块混合在一个文件里使用。</p><blockquote><p>需要注意，当修改后缀之后，我们在使用node执行的该文件时，需要使用node xxx.cjs，写文件的名称时，要对应的修改</p></blockquote><h3 id="_2-创建esm包管理器" tabindex="-1"><a class="header-anchor" href="#_2-创建esm包管理器"><span>2. 创建ESM包管理器</span></a></h3><p>wrapper.mjs</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> inquirer <span class="token keyword">from</span> <span class="token string">&#39;inquirer&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token keyword">export</span> <span class="token punctuation">{</span> inquirer <span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>import(&#39;./wrapper.mjs&#39;)</code>,这个语法很重要 main.cjs</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./wrapper.mjs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> inquirer <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">    program<span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>\n<span class="line">        <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;userName&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span></span>\n<span class="line">            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;你的名字叫什么？&quot;</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">answer</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;回答内容&quot;</span><span class="token punctuation">,</span> answer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-一律用esm" tabindex="-1"><a class="header-anchor" href="#_3-一律用esm"><span>3. 一律用ESM</span></a></h3><p>对于</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也可以用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;commander&#39;</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>导入</p>',23)]))}]]),o=JSON.parse('{"path":"/posts/%E6%B7%B7%E5%90%88%E4%BD%BF%E7%94%A8commonjs%E5%92%8Cesm.html","title":"如何混合使用commonjs和esm","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":2,"title":"解决","slug":"解决","link":"#解决","children":[{"level":3,"title":"1. 修改后缀混合使用commonjs和esm。","slug":"_1-修改后缀混合使用commonjs和esm。","link":"#_1-修改后缀混合使用commonjs和esm。","children":[]},{"level":3,"title":"2. 创建ESM包管理器","slug":"_2-创建esm包管理器","link":"#_2-创建esm包管理器","children":[]},{"level":3,"title":"3. 一律用ESM","slug":"_3-一律用esm","link":"#_3-一律用esm","children":[]}]}],"git":{"updatedTime":1733485150000,"contributors":[{"name":"namewyf","email":"wyf19892552132@163.com","commits":1}]},"filePathRelative":"posts/混合使用commonjs和esm.md","excerpt":"\\n<h2>背景</h2>\\n<p>在npm的各种模块里，有的模块最新引入，使用的是esm，有些是commonjs。</p>\\n<p>如果说回退包的版本，都使用commonjs，那么又会错失很多更新的内容。</p>\\n<h2>解决</h2>\\n<h3>1. 修改后缀混合使用commonjs和esm。</h3>\\n<p>当我们把文件命名为<code>.mjs</code>时，Node.js会默认使用esm模块化规范。</p>\\n<p>如果使用<code>.cjs</code>，Node.js会默认使用commonjs模块化规范。</p>\\n<p>如果是<code>.js</code>，则会看package.json的type字段，如果为module，则使用esm，否则使用commonjs。</p>"}')}}]);