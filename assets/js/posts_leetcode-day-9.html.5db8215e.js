"use strict";(self.webpackChunkfront_end_notes=self.webpackChunkfront_end_notes||[]).push([[650],{8246:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>o});var p=a(641);const e={},t=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,s[0]||(s[0]=[(0,p.Fv)('<h1 id="leetcode-day-9" tabindex="-1"><a class="header-anchor" href="#leetcode-day-9"><span>leetcode day 9</span></a></h1><h2 id="刷题内容和建议" tabindex="-1"><a class="header-anchor" href="#刷题内容和建议"><span><a href="https://docs.qq.com/doc/DUHVXSnZNaXpVUHN4" target="_blank" rel="noopener noreferrer">刷题内容和建议</a></span></a></h2><h2 id="_151-反转字符串中的单词" tabindex="-1"><a class="header-anchor" href="#_151-反转字符串中的单词"><span>151. 反转字符串中的单词</span></a></h2><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/reverse-words-in-a-string/description/</a></p><p>1.函数参数是按值传递的，但是对于对象（包括数组）来说，这个“值”实际上是对对象的引用。这意味着如果你在函数内部修改了传入的对象或数组的内容，这些修改会反映到函数外部。然而，如果你尝试重新赋值这个参数变量本身（在函数内部给它一个新的对象或数组），这个改变不会影响到函数外部的原始变量。<br> 2.应该先判断start再判断end</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>\n<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span></span>\n<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span></span>\n<span class="line"> */</span></span>\n<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">reverseWord</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span>s<span class="token punctuation">,</span>e</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">let</span> i <span class="token operator">=</span> s<span class="token punctuation">,</span>j <span class="token operator">=</span> e</span>\n<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">let</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>\n<span class="line">        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span></span>\n<span class="line">        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">return</span> arr</span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">removeChar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span>\n<span class="line">    <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token number">0</span></span>\n<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">        i<span class="token operator">++</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">        j<span class="token operator">--</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> m <span class="token operator">=</span> i<span class="token punctuation">;</span>m<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">        arr<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">=</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span> </span>\n<span class="line">        tmp<span class="token operator">++</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    arr<span class="token punctuation">.</span>length <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span></span>\n<span class="line">    <span class="token keyword">return</span> arr<span class="token comment">//函数参数是按值传递的，但是对于对象（包括数组）来说，这个“值”实际上是对对象的引用。这意味着如果你在函数内部修改了传入的对象或数组的内容，这些修改会反映到函数外部。然而，如果你尝试重新赋值这个参数变量本身（在函数内部给它一个新的对象或数组），这个改变不会影响到函数外部的原始变量。</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">reverseWords</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">let</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token function">removeChar</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span></span>\n<span class="line">    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>end</span>\n<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">&quot; &quot;</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//应该先判断start再判断end</span></span>\n<span class="line">            start <span class="token operator">=</span> a</span>\n<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">!=</span>start<span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">let</span> t <span class="token operator">=</span> end<span class="token operator">+</span><span class="token number">2</span></span>\n<span class="line">                <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">===</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">                    arr<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>\n<span class="line">                    t<span class="token operator">++</span></span>\n<span class="line">                <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&quot; &quot;</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token operator">||</span>a <span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">===</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">                end <span class="token operator">=</span> a</span>\n<span class="line">            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>\n<span class="line">                end <span class="token operator">=</span> a<span class="token operator">-</span><span class="token number">1</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">            <span class="token function">reverseWord</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span></span>\n<span class="line">        <span class="token punctuation">}</span></span>\n<span class="line">        a<span class="token operator">++</span></span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line">    <span class="token function">reverseWord</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6)]))}]]),o=JSON.parse('{"path":"/posts/leetcode-day-9.html","title":"leetcode day 9","lang":"zh-CN","frontmatter":{"date":"2024-11-07T00:00:00.000Z","category":["CategoryA"],"tag":["argorithm","tag B"]},"headers":[{"level":2,"title":"刷题内容和建议","slug":"刷题内容和建议","link":"#刷题内容和建议","children":[]},{"level":2,"title":"151. 反转字符串中的单词","slug":"_151-反转字符串中的单词","link":"#_151-反转字符串中的单词","children":[]}],"git":{"updatedTime":1731066117000,"contributors":[{"name":"namewyf","email":"wyf19892552132@163.com","commits":1}]},"filePathRelative":"posts/leetcode-day-9.md","excerpt":"\\n<h2><a class=\\"header-anchor\\" href=\\"#刷题内容和建议\\"><span></span></a><a href=\\"https://docs.qq.com/doc/DUHVXSnZNaXpVUHN4\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">刷题内容和建议</a></h2>\\n<h2>151. 反转字符串中的单词</h2>\\n<p><a href=\\"https://leetcode.cn/problems/reverse-words-in-a-string/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://leetcode.cn/problems/reverse-words-in-a-string/description/</a></p>"}')}}]);