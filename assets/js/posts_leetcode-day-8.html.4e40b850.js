"use strict";(self.webpackChunkfront_end_notes=self.webpackChunkfront_end_notes||[]).push([[313],{9149:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>t,data:()=>c});var p=a(641);const e={},t=(0,a(6262).A)(e,[["render",function(n,s){return(0,p.uX)(),(0,p.CE)("div",null,s[0]||(s[0]=[(0,p.Fv)('<h1 id="leetcode-day-8" tabindex="-1"><a class="header-anchor" href="#leetcode-day-8"><span>leetcode day 8</span></a></h1><h2 id="刷题内容和建议" tabindex="-1"><a class="header-anchor" href="#刷题内容和建议"><span><a href="https://docs.qq.com/doc/DUGdsY2JFaFhDRVZH" target="_blank" rel="noopener noreferrer">刷题内容和建议</a></span></a></h2><h2 id="_344-反转字符串" tabindex="-1"><a class="header-anchor" href="#_344-反转字符串"><span>344. 反转字符串</span></a></h2><p><a href="https://leetcode.cn/problems/reverse-string/description/" target="_blank" rel="noopener noreferrer">https://leetcode.cn/problems/reverse-string/description/</a></p><p>记得数组的最后一个元素的下标是length-1</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>\n<span class="line"> * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>character<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">s</span></span>\n<span class="line"> * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span> Do not return anything, modify s in-place instead.</span>\n<span class="line"> */</span></span>\n<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">reverseString</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token keyword">let</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token comment">//记得数组的最后一个元素的下标是length-1</span></span>\n<span class="line">    <span class="token keyword">let</span> tmp</span>\n<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>left<span class="token operator">++</span><span class="token punctuation">,</span>right<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">        tmp <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span></span>\n<span class="line">        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span></span>\n<span class="line">        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> tmp</span>\n<span class="line">    <span class="token punctuation">}</span></span>\n<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_54-替换数字-第八期模拟笔试" tabindex="-1"><a class="header-anchor" href="#_54-替换数字-第八期模拟笔试"><span>54. 替换数字（第八期模拟笔试）</span></a></h2><p><a href="https://kamacoder.com/problempage.php?pid=1064" target="_blank" rel="noopener noreferrer">https://kamacoder.com/problempage.php?pid=1064</a></p><p>注意判断是否是NaN要用isNaN()方法，而不是===NaN这样是不合规的</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">    <span class="token keyword">const</span> readline <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;readline&#39;</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">let</span> rl <span class="token operator">=</span> readline<span class="token punctuation">.</span><span class="token function">createInterface</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>\n<span class="line">        <span class="token literal-property property">input</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdin<span class="token punctuation">,</span></span>\n<span class="line">        <span class="token literal-property property">output</span><span class="token operator">:</span> process<span class="token punctuation">.</span>stdout</span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>\n<span class="line">    rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;line&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">        str <span class="token operator">=</span> line</span>\n<span class="line">        rl<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">    rl<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>\n<span class="line">        <span class="token keyword">let</span> out <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>\n<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">return</span> s</span>\n<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>\n<span class="line">                <span class="token keyword">return</span> <span class="token string">&#39;number&#39;</span></span>\n<span class="line">            <span class="token punctuation">}</span></span>\n<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>\n<span class="line"><span class="token punctuation">}</span></span>\n<span class="line"><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',10)]))}]]),c=JSON.parse('{"path":"/posts/leetcode-day-8.html","title":"leetcode day 8","lang":"zh-CN","frontmatter":{"date":"2024-11-06T00:00:00.000Z","category":["CategoryA"],"tag":["argorithm","tag B"]},"headers":[{"level":2,"title":"刷题内容和建议","slug":"刷题内容和建议","link":"#刷题内容和建议","children":[]},{"level":2,"title":"344. 反转字符串","slug":"_344-反转字符串","link":"#_344-反转字符串","children":[]},{"level":2,"title":"54. 替换数字（第八期模拟笔试）","slug":"_54-替换数字-第八期模拟笔试","link":"#_54-替换数字-第八期模拟笔试","children":[]}],"git":{"updatedTime":1730898648000,"contributors":[{"name":"namewyf","email":"wyf19892552132@163.com","commits":1}]},"filePathRelative":"posts/leetcode-day-8.md","excerpt":"\\n<h2><a class=\\"header-anchor\\" href=\\"#刷题内容和建议\\"><span></span></a><a href=\\"https://docs.qq.com/doc/DUGdsY2JFaFhDRVZH\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">刷题内容和建议</a></h2>\\n<h2>344. 反转字符串</h2>\\n<p><a href=\\"https://leetcode.cn/problems/reverse-string/description/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://leetcode.cn/problems/reverse-string/description/</a></p>"}')}}]);